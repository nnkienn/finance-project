spring:
  # ƒê·ªçc bi·∫øn t·ª´ file .env (n·∫øu c√≥) khi ch·∫°y local/jar
  config:
    import: optional:file:.env[.properties]

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER:org.postgresql.Driver}
    hikari:
      maximum-pool-size: ${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:10}
      minimum-idle: ${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:2}
      idle-timeout: ${SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT:30000}
      max-lifetime: ${SPRING_DATASOURCE_HIKARI_MAX_LIFETIME:1800000}
      connection-timeout: ${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:20000}

  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
    show-sql: ${SPRING_JPA_SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: ${SPRING_JPA_HIBERNATE_FORMAT_SQL:true}
        dialect: ${SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:finance-app}
      auto-offset-reset: ${SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: ${SPRING_KAFKA_PRODUCER_ACKS:all}
      retries: ${SPRING_KAFKA_PRODUCER_RETRIES:5}
      properties:
        enable.idempotence: ${SPRING_KAFKA_PRODUCER_IDEMPOTENCE:true}
        linger.ms: ${SPRING_KAFKA_PRODUCER_LINGER_MS:5}

  mail:
    host: ${SPRING_MAIL_HOST:smtp.gmail.com}
    port: ${SPRING_MAIL_PORT:587}
    username: ${SPRING_MAIL_USERNAME}
    password: ${SPRING_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:true}
          starttls:
            enable: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:true}
          connectiontimeout: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT:5000}
          timeout: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT:5000}
          writetimeout: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT:5000}

  servlet:
    multipart:
      max-file-size: ${SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE:10MB}
      max-request-size: ${SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE:15MB}

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:gmail}

server:
  port: ${SERVER_PORT:8080}
  error:
    include-message: always
    include-binding-errors: always

logging:
  level:
    org.springframework.kafka: DEBUG
    org.springframework.kafka.listener: DEBUG
    org.springframework.kafka.core.KafkaTemplate: DEBUG
    org.springframework.kafka.support.serializer: DEBUG
    org.apache.kafka.clients: INFO
    org.apache.kafka.common.network: INFO
    org.apache.kafka.common.metrics: WARN
    org.hibernate.SQL: INFO
    org.hibernate.orm.jdbc.bind: INFO

app:
  jwt:
    base64-secret: ${APP_JWT_BASE64_SECRET}
    access-token-validity-seconds: ${APP_JWT_ACCESS_TOKEN_TTL:900}
    refresh-token-validity-seconds: ${APP_JWT_REFRESH_TOKEN_TTL:604800}

  verification:
    expire-minutes: ${APP_VERIFICATION_EXPIRE_MINUTES:60}

  outbox:
    cleanup:
      enabled: ${APP_OUTBOX_CLEANUP_ENABLED:true}
      retention-days: ${APP_OUTBOX_RETENTION_DAYS:14}
      batch-size: ${APP_OUTBOX_BATCH_SIZE:500}
      cron: ${APP_OUTBOX_CRON:0 0 3 * * *}

  email:
    from: ${APP_EMAIL_FROM}
    sender-name: ${APP_EMAIL_SENDER_NAME:'Knance Notifications'}

# üí° Cloudinary d√πng tr·ª±c ti·∫øp bi·∫øn m√¥i tr∆∞·ªùng CLOUDINARY_URL (kh√¥ng c·∫ßn map trong YAML).
